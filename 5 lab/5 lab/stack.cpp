#include <iostream>#include "stack_exception.cpp"using namespace std;template<class T, int N>class MyStack {private:    T* _data;    int _n;    int _curInd;public:    MyStack() {        if (N <= 0)            throw invalid_argument("Array size must be positive");        _n = N;        _data = new T[_n];        _curInd = -1;    }    void push(T a) {        try {            if (_curInd == _n - 1)                throw FullStackException();            _curInd++;            _data[_curInd] = a;        }         catch(const char* error) {            cout << "Error: " << error << endl;        }        cout << "Program continues to run.";    }    T take() {        try {            if (_curInd == -1)                throw EmptyStackException();            _curInd--;            return _data[_curInd + 1];        }        catch (const char *error) {            cout << "Error: " << error << endl;        }        cout << "Program continues to run.";    }    ~MyStack() {        delete[] _data;    }};