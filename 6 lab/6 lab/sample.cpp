//// Created by Karina on 14.04.2023.//template <typename Iterator, typename Predicate>bool all_of (Iterator s, Iterator t, Predicate predicate){    while (s!=t){        Iterator iter = s;        if (!predicate(*iter)){            return false;        }        s++;    }    return true;}template <typename Iterator, typename Compare>bool is_sorted (Iterator s, Iterator t, Compare cmp){    if (s==t) return false;    Iterator curr = s;    Iterator prev = curr;    while(++curr != t) {        if(!cmp(*s, *t)) {            return false;        }        prev = curr;    }    return true;}template <typename S_Iterator, typename T_Iterator>bool is_palindrome(S_Iterator start, T_Iterator end) {    if(start == end)        return true;    T_Iterator temp_end = end;    end--;    while(start != end && start != temp_end) {        if(*start != *end)            return false;        start++;        end--;        temp_end--;    }    return true;}