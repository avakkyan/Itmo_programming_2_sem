#ifndef _CIRCLEH_#define _CIRCLEH_#include "interfaces.h"class Circle : IGeoFig, IPhysObject, IPrintable, IDialogInitiable, BaseCObject {private:    CVector2D _vec;    double _radius;public:    Circle() = default;    Circle(CVector2D &vec, double rad) {        if (rad < 0)            throw invalid_argument("Negative circle radius");        _radius = rad;        _vec = vec;    }    virtual double area() const override {        return M_PI * _radius * _radius;    }    virtual double perimeter() const override {        return 2 * M_PI * _radius;    }    virtual double mass() const override {        return LINEAR_DENSITY * area();    };    virtual CVector2D position() const override{        return _vec;    }    virtual bool operator== (const IPhysObject& ob) const override{        return this->mass() == ob.mass();    }    virtual bool operator< (const IPhysObject& ob) const override{        return this->mass() < ob.mass();    }    virtual void draw() const override{        cout << "X: " << _vec.x << "\nY: " << _vec.y << "\nRadius: "<< _radius << "\n";    }    virtual void InitFromDialog() override{        double x, y, r;        cout << "Enter x: " << "\n";        cin >> x;        cout << "Enter y: " << "\n";        cin >> y;        cout << "Enter radius: " << "\n";        cin >> r;        CVector2D vec;        vec.x = x; vec.y = y;        if (r < 0)            throw invalid_argument("Negative circle radius");        _vec = vec;        _radius = r;    }    virtual const char* classname() const override{        return "Circle";    }    virtual unsigned int size() const override{        return sizeof(_vec) + sizeof(_radius);    }};#endif