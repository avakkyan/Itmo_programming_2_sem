#ifndef _TRIANGLEH_#define _TRIANGLEH_#include "interfaces.h"class EquilateralTriangle : IGeoFig, IPhysObject, IPrintable, IDialogInitiable, BaseCObject{private:    CVector2D _vec;    double _side;public:    EquilateralTriangle(CVector2D &vec, double side) {        if (side < 0)            throw invalid_argument("Negative side");        _side = side;        _vec = vec;}    EquilateralTriangle() = default;    virtual double area() const override {        return sqrt(3) * _side * _side / 4.;    }    virtual double perimeter() const override {        return 3 * _side;    }    virtual double mass() const override {        return LINEAR_DENSITY * area();    };    virtual CVector2D position() const override{        CVector2D vec;        double x1, x2, x3;        double y1, y2, y3;        x1 = _vec.x;        x2 = vec.x + _side;        x3 = (vec.x + _side) * cos(-M_PI / 3) - vec.y * sin(-M_PI / 3);        y1 = _vec.y;        y2 = _vec.y;        y3 = (vec.x + _side) * sin(-M_PI / 3) + vec.y * cos(-M_PI / 3);        vec.x = 1/3. * (x1 + x2 + x3);        vec.y = 1/3. * (y1 + y2 + y3);        return vec;    }    virtual bool operator== (const IPhysObject& ob) const override{        return this->mass() == ob.mass();    }    virtual bool operator< (const IPhysObject& ob) const override{        return this->mass() < ob.mass();    }    virtual void draw() const override{        cout << "X: " << _vec.x << "\nY: " << _vec.y << "\nRadius: "<< _side << "\n";    }    virtual void InitFromDialog() override{        double x, y, r;        cout << "Enter x: ";        cin >> x;        cout << "Enter y: ";        cin >> y;        cout << "Enter side: ";        cin >> r;        CVector2D vec;        vec.x = x; vec.y = y;        if (r < 0)            throw invalid_argument("Negative side");        _vec = vec;        _side = r;        }    virtual const char* classname() const override{        return "EquilateralTriangle";    }    virtual unsigned int size() const override{        return sizeof(_vec) + sizeof(_side);    }};#endif