//// Created by Karina on 18.03.2023.//#include "Complex.h"#include <iostream>#include "cmath"Complex::Complex() {    real = 0;    imagine = 0;}Complex:: Complex(double r, double i) {    real = r;    imagine = i;}Complex:: Complex(Complex &c) {    real = c.real;    imagine = c.imagine;}void Complex :: print_c() const {    if (imagine > 0) {        cout << "z = " << real << " + " << imagine << 'i' << endl;    } else {        cout << "z = " << real << " " << imagine << 'i' << endl;    }}void Complex :: mult_by_num(const Complex &c, double a) {    real = real * a;    imagine = imagine * a;}void Complex ::  add_of_comp_num(const Complex &c1, const Complex &c2) {    real = c1.real + c2.real;    imagine = c1.imagine + c2.imagine;}void Complex :: mult_by_2_comp_num(const Complex &c1, const Complex &c2) {    real = c1.real * c2.real - c1.imagine * c2.imagine;    imagine = c1.real * c2.imagine + c2.real * c1.imagine;}double Complex:: length_of_comp_num(Complex c) {    return sqrt(c.real * c.real + c.imagine * c.imagine);}